#include "rclcpp/rclcpp.hpp"
#include "geometry_msgs/msg/twist.hpp"
#include <memory>
#include <iostream>
#include <limits>

int main(int argc, char * argv[])
{
  rclcpp::init(argc, argv);
  auto node = std::make_shared<rclcpp::Node>("node_pub1_3");

  auto qos_profile = rclcpp::QoS(rclcpp::KeepLast(10));
  auto pub = node->create_publisher<geometry_msgs::msg::Twist>("/turtle1/cmd_vel", qos_profile);

  const double LIN = 1.0;   // 선속도 크기
  const double ANG = 1.0;   // 각속도 크기

  std::cout << "[pub1_3] 키 입력: f(전진) b(후진) l(좌회전) r(우회전) q(종료)" << std::endl;

  while (rclcpp::ok()) {
    std::cout << ">> ";
    char c; 
    if (!(std::cin >> c)) {
      std::cin.clear();
      std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
      continue;
    }

    if (c == 'q' || c == 'Q') break;

    geometry_msgs::msg::Twist cmd;
    switch (c) {
      case 'f': case 'F':
        cmd.linear.x = LIN;  cmd.angular.z = 0.0;
        RCLCPP_INFO(node->get_logger(), "앞으로 (lin=%.1f)", cmd.linear.x);
        break;
      case 'b': case 'B':
        cmd.linear.x = -LIN; cmd.angular.z = 0.0;
        RCLCPP_INFO(node->get_logger(), "뒤로 (lin=%.1f)", cmd.linear.x);
        break;
      case 'l': case 'L':
        cmd.linear.x = 0.0;  cmd.angular.z = ANG;
        RCLCPP_INFO(node->get_logger(), "좌회전 (ang=%.1f)", cmd.angular.z);
        break;
      case 'r': case 'R':
        cmd.linear.x = 0.0;  cmd.angular.z = -ANG;
        RCLCPP_INFO(node->get_logger(), "우회전 (ang=%.1f)", cmd.angular.z);
        break;
      default:
        RCLCPP_INFO(node->get_logger(), "알 수 없는 입력: %c", c);
        continue;
    }

    pub->publish(cmd);
    // 필요시 rclcpp::spin_some(node);
  }

  rclcpp::shutdown();
  return 0;
}
